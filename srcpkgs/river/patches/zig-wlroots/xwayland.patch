diff --git a/src/backend/session.zig b/src/backend/session.zig
index 4c50dd4..e2ab0c6 100644
--- a/src/backend/session.zig
+++ b/src/backend/session.zig
@@ -6,7 +6,7 @@ const wl = wayland.server.wl;
 pub const Device = extern struct {
     pub const event = struct {
         pub const Change = extern struct {
-            pub const Type = extern enum {
+            pub const Type = enum(c_int) {
                 hotplug = 1,
                 lease,
             };
diff --git a/src/types/data_device.zig b/src/types/data_device.zig
index 9b18b5f..2335e73 100644
--- a/src/types/data_device.zig
+++ b/src/types/data_device.zig
@@ -22,7 +22,7 @@ pub const DataDeviceManager = extern struct {
 };
 
 pub const DataOffer = extern struct {
-    pub const Type = extern enum {
+    pub const Type = enum(c_int) {
         selection,
         drag,
     };
@@ -103,7 +103,7 @@ pub const Drag = extern struct {
         data: usize,
     };
 
-    pub const GrabType = extern enum {
+    pub const GrabType = enum(c_int) {
         keyboard,
         keyboard_pointer,
         keyboard_touch,
diff --git a/src/types/input_device.zig b/src/types/input_device.zig
index bf1cf51..0835106 100644
--- a/src/types/input_device.zig
+++ b/src/types/input_device.zig
@@ -4,7 +4,7 @@ const wayland = @import("wayland");
 const wl = wayland.server.wl;
 
 pub const InputDevice = extern struct {
-    pub const Type = extern enum {
+    pub const Type = enum(c_int) {
         keyboard,
         pointer,
         touch,
diff --git a/src/types/list.zig b/src/types/list.zig
new file mode 100644
index 0000000..34048ac
--- /dev/null
+++ b/src/types/list.zig
@@ -0,0 +1,5 @@
+pub const List = extern struct {
+    capacity: usize,
+    length: usize,
+    items: ?[*]?*c_void,
+};
diff --git a/src/types/output.zig b/src/types/output.zig
index 755116f..c486f76 100644
--- a/src/types/output.zig
+++ b/src/types/output.zig
@@ -17,7 +17,7 @@ pub const Output = extern struct {
         link: wl.list.Link,
     };
 
-    pub const AdaptiveSyncStatus = extern enum {
+    pub const AdaptiveSyncStatus = enum(c_int) {
         disabled,
         enabled,
         unknown,
@@ -36,7 +36,7 @@ pub const Output = extern struct {
             pub const render_format = 1 << 8;
         };
 
-        pub const ModeType = extern enum {
+        pub const ModeType = enum(c_int) {
             fixed,
             custom,
         };
diff --git a/src/types/output_layout.zig b/src/types/output_layout.zig
index fc4f307..15415e3 100644
--- a/src/types/output_layout.zig
+++ b/src/types/output_layout.zig
@@ -20,7 +20,7 @@ pub const OutputLayout = extern struct {
         },
     };
 
-    pub const Direction = extern enum {
+    pub const Direction = enum(c_int) {
         up = 1,
         down = 2,
         left = 4,
diff --git a/src/types/pointer.zig b/src/types/pointer.zig
index 7e53869..98d3736 100644
--- a/src/types/pointer.zig
+++ b/src/types/pointer.zig
@@ -3,14 +3,14 @@ const wlr = @import("../wlroots.zig");
 const wayland = @import("wayland");
 const wl = wayland.server.wl;
 
-pub const AxisSource = extern enum {
+pub const AxisSource = enum(c_int) {
     wheel,
     finger,
     continuous,
     wheel_tilt,
 };
 
-pub const AxisOrientation = extern enum {
+pub const AxisOrientation = enum(c_int) {
     vertical,
     horizontal,
 };
@@ -125,5 +125,5 @@ pub const Pointer = extern struct {
 
         hold_begin: wl.Signal(*event.HoldBegin),
         hold_end: wl.Signal(*event.HoldEnd),
-    }
+    },
 };
diff --git a/src/types/pointer_constraints_v1.zig b/src/types/pointer_constraints_v1.zig
index 6e25082..7a1ed9f 100644
--- a/src/types/pointer_constraints_v1.zig
+++ b/src/types/pointer_constraints_v1.zig
@@ -27,7 +27,7 @@ pub const PointerConstraintV1 = extern struct {
             y: f64,
         },
     };
-    pub const Type = extern enum {
+    pub const Type = enum(c_int) {
         locked,
         confined,
     };
diff --git a/src/types/scene.zig b/src/types/scene.zig
new file mode 100644
index 0000000..6649ea2
--- /dev/null
+++ b/src/types/scene.zig
@@ -0,0 +1,255 @@
+const wlr = @import("../wlroots.zig");
+
+const std = @import("std");
+const os = std.os;
+
+const wayland = @import("wayland");
+const wl = wayland.server.wl;
+
+const pixman = @import("pixman");
+
+pub const SceneNode = extern struct {
+    pub const Type = enum(c_int) {
+        root,
+        tree,
+        surface,
+        rect,
+        buffer,
+    };
+
+    pub const State = extern struct {
+        link: wl.list.Link,
+        children: wl.list.Head(SceneNode.State, "link"),
+
+        enabled: bool,
+        x: c_int,
+        y: c_int,
+    };
+
+    type: Type,
+    parent: ?*SceneNode,
+    state: State,
+
+    events: extern struct {
+        destroy: wl.Signal(void),
+    },
+
+    data: usize,
+
+    extern fn wlr_scene_node_at(node: *SceneNode, lx: f64, ly: f64, nx: *f64, ny: *f64) ?*SceneNode;
+    pub const at = wlr_scene_node_at;
+
+    extern fn wlr_scene_node_coords(node: *SceneNode, lx: *c_int, ly: *c_int) bool;
+    pub const coords = wlr_scene_node_coords;
+
+    extern fn wlr_scene_node_destroy(node: *SceneNode) void;
+    pub const destroy = wlr_scene_node_destroy;
+
+    extern fn wlr_scene_node_for_each_surface(
+        node: *SceneNode,
+        iterator: fn (surface: *wlr.Surface, sx: c_int, sy: c_int, data: ?*c_void) callconv(.C) void,
+        user_data: ?*c_void,
+    ) void;
+    pub inline fn forEachSurface(
+        node: *SceneNode,
+        comptime T: type,
+        iterator: fn (surface: *wlr.Surface, sx: c_int, sy: c_int, data: T) callconv(.C) void,
+        data: T,
+    ) void {
+        wlr_scene_node_for_each_surface(
+            node,
+            @ptrCast(fn (surface: *wlr.Surface, sx: c_int, sy: c_int, data: ?*c_void) callconv(.C) void, iterator),
+            data,
+        );
+    }
+
+    extern fn wlr_scene_node_lower_to_bottom(node: *SceneNode) void;
+    pub const lowerToBottom = wlr_scene_node_lower_to_bottom;
+
+    extern fn wlr_scene_node_place_above(node: *SceneNode, sibling: *SceneNode) void;
+    pub const placeAbove = wlr_scene_node_place_above;
+
+    extern fn wlr_scene_node_place_below(node: *SceneNode, sibling: *SceneNode) void;
+    pub const placeBelow = wlr_scene_node_place_below;
+
+    extern fn wlr_scene_node_raise_to_top(node: *SceneNode) void;
+    pub const raiseToTop = wlr_scene_node_raise_to_top;
+
+    extern fn wlr_scene_node_reparent(node: *SceneNode, new_parent: *SceneNode) void;
+    pub const reparent = wlr_scene_node_reparent;
+
+    extern fn wlr_scene_node_set_enabled(node: *SceneNode, enabled: bool) void;
+    pub const setEnabled = wlr_scene_node_set_enabled;
+
+    extern fn wlr_scene_node_set_position(node: *SceneNode, x: c_int, y: c_int) void;
+    pub const setPosition = wlr_scene_node_set_position;
+
+    extern fn wlr_scene_tree_create(parent: *SceneNode) ?*SceneTree;
+    pub fn createSceneTree(parent: *SceneNode) !*SceneTree {
+        return wlr_scene_tree_create(parent) orelse error.OutOfMemory;
+    }
+
+    extern fn wlr_scene_surface_create(parent: *SceneNode, surface: *wlr.Surface) ?*SceneSurface;
+    pub fn createSceneSurface(parent: *SceneNode, surface: *wlr.Surface) !*SceneSurface {
+        return wlr_scene_surface_create(parent, surface) orelse error.OutOfMemory;
+    }
+
+    extern fn wlr_scene_rect_create(parent: *SceneNode, width: c_int, height: c_int, color: *const [4]f32) ?*SceneRect;
+    pub fn createSceneRect(parent: *SceneNode, width: c_int, height: c_int, color: *const [4]f32) !*SceneRect {
+        return wlr_scene_rect_create(parent, width, height, color) orelse error.OutOfMemory;
+    }
+
+    extern fn wlr_scene_buffer_create(parent: *SceneNode, buffer: *wlr.Buffer) ?*SceneBuffer;
+    pub fn createSceneBuffer(parent: *SceneNode, buffer: *wlr.Buffer) !*SceneBuffer {
+        return wlr_scene_buffer_create(parent, buffer) orelse error.OutOfMemory;
+    }
+
+    extern fn wlr_scene_subsurface_tree_create(parent: *SceneNode, surface: *wlr.Surface) ?*SceneNode;
+    pub fn createSceneSubsurfaceTree(parent: *SceneNode, surface: *wlr.Surface) !*SceneNode {
+        return wlr_scene_subsurface_tree_create(parent, surface) orelse error.OutOfMemory;
+    }
+
+    extern fn wlr_scene_xdg_surface_create(parent: *SceneNode, xdg_surface: ?*wlr.XdgSurface) ?*SceneNode;
+    pub fn createSceneXdgSurface(parent: *SceneNode, xdg_surface: *wlr.XdgSurface) !*SceneNode {
+        return wlr_scene_xdg_surface_create(parent, xdg_surface) orelse error.OutOfMemory;
+    }
+};
+
+pub const Scene = extern struct {
+    node: SceneNode,
+
+    outputs: wl.list.Head(SceneOutput, "link"),
+
+    // private state
+
+    presentation: ?*wlr.Presentation,
+    presentation_destroy: wl.Listener(void),
+
+    extern fn wlr_scene_create() ?*Scene;
+    pub fn create() !*Scene {
+        return wlr_scene_create() orelse error.OutOfMemory;
+    }
+
+    extern fn wlr_scene_attach_output_layout(scene: *Scene, output_layout: *wlr.OutputLayout) bool;
+    pub fn attachOutputLayout(scene: *Scene, output_layout: *wlr.OutputLayout) !void {
+        if (!wlr_scene_attach_output_layout(scene, output_layout)) return error.OutOfMemory;
+    }
+
+    extern fn wlr_scene_get_scene_output(scene: *Scene, output: *wlr.Output) ?*SceneOutput;
+    pub const getSceneOutput = wlr_scene_get_scene_output;
+
+    extern fn wlr_scene_render_output(scene: *Scene, output: *wlr.Output, lx: c_int, ly: c_int, damage: ?*pixman.Region32) void;
+    pub const renderOutput = wlr_scene_render_output;
+
+    extern fn wlr_scene_set_presentation(scene: *Scene, presentation: *wlr.Presentation) void;
+    pub const setPresentation = wlr_scene_set_presentation;
+
+    extern fn wlr_scene_output_create(scene: *Scene, output: *wlr.Output) ?*SceneOutput;
+    pub fn createSceneOutput(scene: *Scene, output: *wlr.Output) !*SceneOutput {
+        return wlr_scene_output_create(scene, output) orelse error.OutOfMemory;
+    }
+};
+
+pub const SceneTree = extern struct {
+    node: SceneNode,
+};
+
+pub const SceneSurface = extern struct {
+    node: SceneNode,
+    surface: *wlr.Surface,
+
+    primary_output: ?*wlr.Output,
+
+    // private state
+
+    prev_width: c_int,
+    prev_height: c_int,
+
+    surface_destroy: wl.Listener(void),
+    surface_commit: wl.Listener(void),
+
+    extern fn wlr_scene_surface_from_node(node: *SceneNode) *SceneSurface;
+    pub const fromNode = wlr_scene_surface_from_node;
+};
+
+pub const SceneRect = extern struct {
+    node: SceneNode,
+    width: c_int,
+    height: c_int,
+    color: [4]f32,
+
+    extern fn wlr_scene_rect_set_color(rect: *SceneRect, color: *const [4]f32) void;
+    pub const setColor = wlr_scene_rect_set_color;
+
+    extern fn wlr_scene_rect_set_size(rect: *SceneRect, width: c_int, height: c_int) void;
+    pub const setSize = wlr_scene_rect_set_size;
+};
+
+pub const SceneBuffer = extern struct {
+    node: SceneNode,
+    buffer: *wlr.Buffer,
+
+    // private state
+
+    texture: ?*wlr.Texture,
+    src_box: wlr.FBox,
+    dst_width: c_int,
+    dst_height: c_int,
+    transform: wl.Output.Transform,
+
+    extern fn wlr_scene_buffer_set_dest_size(scene_buffer: *SceneBuffer, width: c_int, height: c_int) void;
+    pub const setDestSize = wlr_scene_buffer_set_dest_size;
+
+    extern fn wlr_scene_buffer_set_source_box(scene_buffer: *SceneBuffer, box: *const wlr.FBox) void;
+    pub const setSourceBox = wlr_scene_buffer_set_source_box;
+
+    extern fn wlr_scene_buffer_set_transform(scene_buffer: *SceneBuffer, transform: wl.Output.Transform) void;
+    pub const setTransform = wlr_scene_buffer_set_transform;
+};
+
+pub const SceneOutput = extern struct {
+    output: *wlr.Output,
+    /// Scene.outputs
+    link: wl.list.Link,
+    scene: *Scene,
+    addon: wlr.Addon,
+
+    damage: *wlr.OutputDamage,
+
+    x: c_int,
+    y: c_int,
+
+    // private state
+
+    prev_scanout: bool,
+
+    extern fn wlr_scene_output_commit(scene_output: *SceneOutput) bool;
+    pub const commit = wlr_scene_output_commit;
+
+    extern fn wlr_scene_output_destroy(scene_output: *SceneOutput) void;
+    pub const destroy = wlr_scene_output_destroy;
+
+    extern fn wlr_scene_output_for_each_surface(
+        scene_output: *SceneOutput,
+        iterator: fn (surface: *wlr.Surface, sx: c_int, sy: c_int, data: ?*c_void) callconv(.C) void,
+        user_data: ?*c_void,
+    ) void;
+    pub inline fn forEachSurface(
+        scene_output: *SceneOutput,
+        comptime T: type,
+        iterator: fn (surface: *wlr.Surface, sx: c_int, sy: c_int, data: T) callconv(.C) void,
+        data: T,
+    ) void {
+        wlr_scene_output_for_each_surface(
+            scene_output,
+            @ptrCast(fn (surface: *wlr.Surface, sx: c_int, sy: c_int, data: ?*c_void) callconv(.C) void, iterator),
+            data,
+        );
+    }
+
+    extern fn wlr_scene_output_send_frame_done(scene_output: *SceneOutput, now: *os.timespec) void;
+    pub const sendFrameDone = wlr_scene_output_send_frame_done;
+
+    extern fn wlr_scene_output_set_position(scene_output: *SceneOutput, lx: c_int, ly: c_int) void;
+    pub const setPosition = wlr_scene_output_set_position;
+};
diff --git a/src/types/tablet_tool.zig b/src/types/tablet_tool.zig
index 36bd920..cf1a0cb 100644
--- a/src/types/tablet_tool.zig
+++ b/src/types/tablet_tool.zig
@@ -3,7 +3,7 @@ const wlr = @import("../wlroots.zig");
 const wl = @import("wayland").server.wl;
 
 pub const TabletTool = extern struct {
-    pub const Type = extern enum {
+    pub const Type = enum(c_int) {
         pen = 1,
         eraser,
         brush,
@@ -58,7 +58,7 @@ pub const Tablet = extern struct {
         };
 
         pub const Proximity = extern struct {
-            pub const State = extern enum {
+            pub const State = enum(c_int) {
                 out,
                 in,
             };
@@ -73,7 +73,7 @@ pub const Tablet = extern struct {
         };
 
         pub const Tip = extern struct {
-            pub const State = extern enum {
+            pub const State = enum(c_int) {
                 up,
                 down,
             };
diff --git a/src/types/xdg_decoration_v1.zig b/src/types/xdg_decoration_v1.zig
index 3344762..c456728 100644
--- a/src/types/xdg_decoration_v1.zig
+++ b/src/types/xdg_decoration_v1.zig
@@ -23,7 +23,7 @@ pub const XdgDecorationManagerV1 = extern struct {
 };
 
 pub const XdgToplevelDecorationV1 = extern struct {
-    pub const Mode = extern enum {
+    pub const Mode = enum(c_int) {
         none = 0,
         client_side = 1,
         server_side = 2,
diff --git a/src/types/xdg_shell.zig b/src/types/xdg_shell.zig
index 30e13d9..dc20f40 100644
--- a/src/types/xdg_shell.zig
+++ b/src/types/xdg_shell.zig
@@ -240,7 +240,7 @@ pub const XdgToplevel = extern struct {
 };
 
 pub const XdgSurface = extern struct {
-    pub const Role = extern enum {
+    pub const Role = enum(c_int) {
         none,
         toplevel,
         popup,
diff --git a/src/util/log.zig b/src/util/log.zig
index e595603..f3e28be 100644
--- a/src/util/log.zig
+++ b/src/util/log.zig
@@ -1,4 +1,4 @@
-pub const Importance = extern enum {
+pub const Importance = enum(c_int) {
     silent = 0,
     err = 1,
     info = 2,
diff --git a/src/wlroots.zig b/src/wlroots.zig
index babc714..afee001 100644
--- a/src/wlroots.zig
+++ b/src/wlroots.zig
@@ -158,6 +158,14 @@ pub const OutputConfigurationV1 = @import("types/output_management_v1.zig").Outp
 pub const ForeignToplevelManagerV1 = @import("types/foreign_toplevel_management_v1.zig").ForeignToplevelManagerV1;
 pub const ForeignToplevelHandleV1 = @import("types/foreign_toplevel_management_v1.zig").ForeignToplevelHandleV1;
 
+pub const SceneNode = @import("types/scene.zig").SceneNode;
+pub const Scene = @import("types/scene.zig").Scene;
+pub const SceneTree = @import("types/scene.zig").SceneTree;
+pub const SceneSurface = @import("types/scene.zig").SceneSurface;
+pub const SceneRect = @import("types/scene.zig").SceneRect;
+pub const SceneBuffer = @import("types/scene.zig").SceneBuffer;
+pub const SceneOutput = @import("types/scene.zig").SceneOutput;
+
 pub const config = @import("config.zig");
 pub const version = @import("version.zig");
 
diff --git a/src/xwayland.zig b/src/xwayland.zig
index 7c4eb22..0ef4798 100644
--- a/src/xwayland.zig
+++ b/src/xwayland.zig
@@ -14,7 +14,7 @@ const xcb = struct {
     const Window = u32;
     const Atom = u32;
 
-    const StackMode = extern enum {
+    const StackMode = enum(c_int) {
         above = 0,
         below = 1,
         top_if = 2,
@@ -121,7 +121,7 @@ pub const Xwayland = extern struct {
 };
 
 pub const XwaylandSurface = extern struct {
-    pub const IcccmInputModel = extern enum {
+    pub const IcccmInputModel = enum(c_int) {
         none = 0,
         passive = 1,
         local = 2,
@@ -284,7 +284,7 @@ pub const XwaylandSurface = extern struct {
     extern fn wlr_xwayland_surface_activate(surface: *XwaylandSurface, activated: bool) void;
     pub const activate = wlr_xwayland_surface_activate;
 
-    extern fn wlr_xwayland_surface_restack(surface: *XwaylandSurface, sibling: *XwaylandSurface, mode: xcb.StackMode) void;
+    extern fn wlr_xwayland_surface_restack(surface: *XwaylandSurface, sibling: ?*XwaylandSurface, mode: xcb.StackMode) void;
     pub const restack = wlr_xwayland_surface_restack;
 
     extern fn wlr_xwayland_surface_configure(surface: *XwaylandSurface, x: i16, y: i16, width: u16, height: u16) void;
