#!/bin/sh

. ./scripts/common/print.sh

packages="$*"

# If no specific package has been specified, let's build them all.
if [ -z "$packages" ]; then
	packages="$(git ls-files 'srcpkgs/*' | cut --delimiter / --fields 2 | uniq)"
fi

print_header $info "Preparing output directories"
if ! ./scripts/local/prepare.sh > out/msg 2>&1; then
	print_header $error "Could not prepare output directories"
	print_msg "$(cat out/msg)"
	exit 1
fi

for arch in x86_64 x86_64-musl; do
	print_header $info "Building requested packages for '$arch'"

	case "$arch" in
		*-musl) bootstrap_arch=x86_64-musl ;;
		*)      bootstrap_arch=x86_64 ;;
	esac
	print_msg "Bootstrap architecture for this build: '$bootstrap_arch'"

	print_header $info "Removing 'void-packages' repository"
	if ! rm --recursive --force void-packages > out/msg 2>&1; then
		print_header $error "Could not remove previous existing 'void-packages' repository"
		print_msg "$(cat out/msg)"
		exit 1
	fi

	print_header $info "Cloning fresh version of 'void-packages'"
	if ! git clone --depth 1 https://github.com/void-linux/void-packages.git > out/msg 2>&1; then
		print_header $error "Could not clone 'void-packages'"
		print_msg "$(cat out/msg)"
	fi

	print_header $info "Patching 'common/shlibs'"
	if ! cat shlibs > out/msg 2>&1; then
		print_header $error "Could not patch 'common/shlibs'"
		print_msg "$(cat out/msg)"
		exit 1
	else
		cat out/msg >> void-packages/common/shlibs 
	fi

	for pkg in $packages; do
		if [ -L srcpkgs/"$pkg" ]; then
			continue
		fi

		print_header $info "Building '$pkg' for '$arch'"

		if [ ! -e data/"$pkg".ignore ]; then
			case "$pkg" in
				*-devel) ;;
				*)
					print_msg "Updating checksum of '$pkg' for '$arch'"
					if ! ./scripts/local/checksum.sh "$bootstrap_arch" "$pkg" > out/msg 2>&1; then
						print_header $error "Could not update checksum of '$pkg' for '$arch'"
						print_msg "$(cat out/msg)"
						exit 1
					fi
					;;
			esac
		fi

		print_msg "Copying source of '$pkg' into 'void-packages'"
		if ! cp --recursive --no-target-directory --force \
			srcpkgs/"$pkg" void-packages/srcpkgs/"$pkg" > out/msg 2>&1
		then
			print_header $error "Could not copy '$pkg' to 'void-packages'"
			print_msg "$(cat out/msg)"
			exit 1
		fi

		print_msg "Started packaging '$pkg' for '$arch'"
		./scripts/local/build.sh "$bootstrap_arch" "$arch" "$pkg" > out/msg 2>&1
		exit_code=$?
		if [ $exit_code -eq 0 ]; then
			print_msg "Finished building '$pkg' for '$arch'"
		elif [ $exit_code -eq 2 ]; then
			print_header $warn "Could not build '$pkg' for '$arch'"
			print_msg "Check logs at 'out/log/$pkg-$arch.log'"
		else
			print_header $error "Failed to build package '$pkg' for '$arch'"
			print_msg "$(cat out/msg)"
			exit 1
		fi
	done

	print_header $info "Signing packages for '$arch'"
	if ! ./scripts/local/sign.sh "$bootstrap_arch" "$arch" > out/msg 2>&1; then
		print_header $warn "Could not sign packages for '$arch'"
		print_msg "$(cat out/msg)"
	fi
done

print_header $info "Cleaning up output directory"
rm --force out/msg
rm --recursive --force void-packages
